<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.seong.portfolio.quiz_quest.comments.courses.repo.CourseCommentsRepository">

    <insert id="save" parameterType="com.seong.portfolio.quiz_quest.comments.courses.vo.CourseCommentsVO" useGeneratedKeys="true" keyProperty="commentId">
        <if test="parentCommentId == null">
            INSERT INTO course_comments(course_id, comment_content, user_num)
            VALUES (#{commentId}, #{commentContent}, #{userNum});
        </if>
        <if test="parentCommentId != null">
            INSERT INTO course_comments(course_id, parent_comment_id, comment_content, user_num)
            VALUES (#{courseId}, #{parentCommentId}, #{commentContent}, #{userNum});
        </if>
    </insert>

    <select id="findAllByCommentIdAndCourseId" parameterType="Map" resultMap="ccMap" >
        SELECT
            cc.comment_id,
            cc.comment_content,
            cc.created_at,
            u.level
        FROM course_comments cc
                 INNER JOIN users u ON cc.user_num = u.user_num
        WHERE comment_id > #{largestCommentId}  AND course_id = #{CourseCommentsVO.courseId} AND parent_comment_id IS NULL
        ;
    </select>


    <select id="findAllByCourseIdAndAndSortTypeAndCursor" parameterType="Map" resultMap="ccMap">

        SELECT
        cc.comment_id,
        cc.comment_content,
        cc.created_at,
        u.level,
        u.user_id,
        (SELECT COUNT(*) FROM course_comments WHERE parent_comment_id = cc.comment_id) AS reply_count,
        <!--커서 기반 페이지네이션을 이용할 경우 createdAt과 commentId를 문자열로  -->
        CONCAT(
        LPAD(POW(10, 10) - UNIX_TIMESTAMP(cc.created_at), 10, '0'),
        LPAD(POW(10, 10) - cc.comment_id, 10, '0')
        ) AS `cursor`

        FROM course_comments cc
        INNER JOIN users u ON cc.user_num = u.user_num

        WHERE
        cc.comment_id IN (
        SELECT comment_id
        FROM course_comments
        WHERE parent_comment_id IS NULL
        )
        AND cc.course_id = #{courseId}
        <if test="cursor != 0">
            AND  CONCAT(LPAD(POW(10, 10) - UNIX_TIMESTAMP(cc.created_at), 10, '0'), LPAD(POW(10, 10) - cc.comment_id, 10, '0'))
            <if test="sortType.equals('DESC')">
                <![CDATA[>]]>
            </if>
            <if test="sortType.equals('ASC')">
                <![CDATA[<]]>
            </if>
            #{cursor}
        </if>
        ORDER BY
        <if test="sortType == 'DESC'">
            cc.created_at DESC, cc.comment_id DESC
        </if>
        <if test="sortType == 'ASC'">
            cc.created_at ASC, cc.comment_id ASC
        </if>
        LIMIT 10;
    </select>

    <select id="findAllByParentCommentId" parameterType="Map" resultMap="ccMap">
        SELECT
        cc.comment_id,
        cc.comment_content,
        cc.created_at,
        u.level,

        <!--커서 기반 페이지네이션을 이용할 경우 createdAt과 commentId를 문자열로  -->
        CONCAT(
        LPAD(POW(10, 10) - UNIX_TIMESTAMP(cc.created_at), 10, '0'),
        LPAD(POW(10, 10) - cc.comment_id, 10, '0')
        ) AS `cursor`

        FROM course_comments cc
        INNER JOIN users u ON cc.user_num = u.user_num
        WHERE
        cc.parent_comment_id = #{parentCommentId}
        <if test="cursor != 0">
            AND  CONCAT(LPAD(POW(10, 10) - UNIX_TIMESTAMP(cc.created_at), 10, '0'), LPAD(POW(10, 10) - cc.comment_id, 10, '0'))
            <if test="sortType == 'DESC'">
                <![CDATA[>]]>
            </if>
            <if test="sortType == 'ASC'">
                <![CDATA[<]]>
            </if>
            #{cursor}
        </if>
        ORDER BY
        <if test="sortType == 'DESC'">
            cc.created_at DESC, cc.comment_id DESC
        </if>
        <if test="sortType == 'ASC'">
            cc.created_at ASC, cc.comment_id ASC
        </if>
        LIMIT 10;
    </select>



    <resultMap id="ccMap" type="com.seong.portfolio.quiz_quest.comments.courses.vo.CourseCommentsVO">
        <id property="commentId" column="comment_id"/> <!-- 댓글 ID -->
        <result property="commentContent" column="comment_content"/> <!-- 댓글 내용 -->
        <result property="createdAt" column="created_at"/> <!-- 생성 시간 -->
        <result property="courseId" column="course_id"/> <!-- 문제 ID -->
        <result property="author" column="user_id"/>
        <result property="level" column="level"/>
        <result property="cursor" column="cursor"/>
        <result property="replyCount" column="reply_count"/>
    </resultMap>


</mapper>